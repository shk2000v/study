자바당 정파 기술 EJB
EJB = Enterprise Java Beans
 ㄴ 막상 까보니 너무 어려웠음
 
 스프링!
- EJB 컨테이너 대체
- 단순함의 승리
- 현재 사실상 표준 기술

하이버네이트
-EJB 엔티티빈 기술을 대체
-JPA(Java Persistence API)표준 정의

표준인터페이스(JPA) <= JPA구현체들(하이버네이트, EclipseLinkm, 기타....)
     ㄴ 이렇게 JAP구현체들을 상속받음 

유겐 휠러, 얀카로프가 로드존슨에게 오픈소스 프로젝트를 제안
스프링의 핵심 코드의 상당수는 유겐휠러가 지금도 개발

필수
- 스프링 프레임워크
- 스프링 부트

선택
- 스프링 데이터
- 스프링 세션
- 스프링 시큐리티
- 스프링 Rest Docs
- 스프링 배치
- 스프링 클라우드

OSI 7 layers 라는 개념이 있다

|Application | 
|Presentation|
|Sesstion    |
|Transport   |
|Network     |
|Data Link   |
|Physical    |

ip area = Network/DataLink/Physical
TCP = Session



Restful API란?

REST : Representational State Transfer
URL을 통해서 CRUD를 할수있게 하는것이다

======================================
스프링 배치(Batch)

imMemory DB
======================================
[스프링 프레임 워크]

핵심기술 : 
-스프링 DI 컨테이너(DI = Dependency Injection 의존성 관계 주입)
-AOP(Aspect oriented Programming 관점 지향 프로그래밍)
-이벤트 
-기타

웹기술 :
-스프링 MVC
-스프링 WebFlux
데이터 접근 기술 : 트랜잭션, JDBC, ORM지원 , XML지원
기술 통합 : 캐시,이메일, 원격접근, 스케줄링
테스트 : 스프링 기반 테스트 지원
언어 : 코틀린, 그루비
최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 이용
===========================================================
[스프링 부트]
- 스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용
- 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
- Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
- 손쉬운 빌드 구성을 위한 starter 종속성 제공
- 스프링과 3rd parth(외부) 라이브러리 자동 구성
- 메트릭, 상태확인, 외부 구성같은 프로덕션 준비 기능 제공
- 관례에 의한 간결한 설정

스프링 단어?
-스프링이라는 단어는 문맥에 따라 다르게 사용된다
    - 스프링 DI컨테이너 기술
    - 스프링 프레임 워크
    - 스프링 부트, 스프링 프레임 워크 등을 모두 포함한 스프링 생태계
   

핵심개념
~ 이 기술을 왜 만들었는가?
~ 이 기술의 핵심 컨셉은?

OOP프로그램을 아주 잘짜면
-유지,보수,관리가 아주 편리해진다
- 만들면 편리한데 만들기까지가 넘 어려웡

spring 프레임워크를 짠다는건? 
OOP개념으로 프로그램을 잘 짰는지도 확인할수있음

스프링의 핵심 개념, 컨셉?
-웹 애플리케이션을 만들고, DB접근 편리하게 해주는 기술?
-전자정부 프레임워크?
-웹서버도 자동으로 띄워주고?
-클라우드, 마이크로서비스?


스프링의 진짜 핵심
- 스프링은 자바언어 기반의 프레임 워크
- 자바 언어의 가장 큰 특징 - 객체지향언어!!!!!!
- 스프링은 객체지향언어가 가진 강력한 특징을 살려내는 프레임워크
- 스프링은 좋은 객체 지향 어플리케이션을 개발할 수 있게 도와주는 프레임워크


유연하고 변경이 용이???
- 레고블럭 조립하듯이
- 키보드, 마우스 갈아끼우듯이
- 컴퓨터 부품 갈아 끼우듯이
- 컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
다형성을 눈여겨볼 필요가 있다

다형성의 실세계 비유
-실세계와 객체 지향을 1:1로 매칭x
-그래도 실세계의 비유로 이해하기에는 좋음
-역할과 구현으로 세상을 구분

예시)
운전자 - 자동차
공연 무대
키보드, 마우스, 세상의 표준 인터페이스들 // 이를테면 키보드와 마우스를 동작할때 내부적으로 신경쓰지않는것과 같이
정렬알고리즘
할인 정책 로직

역할과 구현을 분리
- 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
-장점
    - 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
    - 클라이언트는 구현 대상의 내부 구조를 몰라도 된다
    - 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
    - 구현 대상의 자체를 변경해도 영향을 받지 않는다.
ㅁ
- 자바 언어의 다형성을 확용
    -역할 = 인터페이스
    -구현= 인터페이스를 구현한 클래스, 구현객체
-객체를 설계할 때 역할과 구현을 명확히 분히


객체의 협력이라는 관계부터 생각
- 혼자 있는 객체는 없다.
- 클라이언트 : 요청, 서버: 응답
- 수많은 객체 클라이언트와 객체 서버는 협력관계를 가진다


자바 언어의 다형성
- 오버라이딩을 떠올려보자
- 오버라이딩은 자바 기본 문법
- 오버라이딩 된 메서드가 실행
- 다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경할 수 있다.
- 물론 클래스 상속 관계도 다형성, 오버라이딩 적용 가능


다형성의 본질
-인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
-다형성의 본질을 이해하려면 협력이라는 객체사이의 관계에서 시작해야함
-클라이언트를 변경하지 않고 , 서버를 구형


Programing = Planing(80%) + Coding(20%)
    ㄴ 이걸 잘 못하면 유지보수에 어마어마한 돈이 들어간다
    
ㅁ


스프링과 객체 지향
-다형성이 가장 중요하다!
스프링은 다형성을 극대화해서 이용할 수 있게 도와준다
스프링에서 이야기하는 제어의 역전(IoC), 의존관계 주입(DI)



SOLID
(클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리)
SRP : 단일 책입 원칙(single responsibility principle) #클래스를 짤때 하나의 기능만하게 설계
OCP : 개방-폐쇄 원칙(Open/closed principle) # 
LSP : 리스코프 치환 원칙(Liskov subsitution principle)
ISP : 인터페이스 분리 원칙(Interface segregation principle)
DIP : 의존관계 역전 원칙(Dependency inversion principle)


SRP
-한 클래스는 하나의 책임만 가져야 한다
-중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것
-예)UI변경, 객체의 생성과 사용을 분리

OCP (개방-폐쇄 원칙)
-소프르웨어 요소는 확장에는 열려있으나 변경에는 닫혀 있어야 한다.
(프로그램 기능을 늘리거나 하는데에는 부담이 없어야 하지만
프로그램 기능을 변경하는 데에는 여러사람이 건드리지 않아야 하게 만들어야 한다)
좋은 OCP개념을 만족하는 코드는...고객이 몰라야한다!!
MemberRepository m = new MemoryMemberRepository(); //기존코드
MemberRepository m = new JdbcMemberRepository(); //변경코드
구현 객체를 변경하려면 클라이언트 코드를 변경해야한다.


LSP 리스코프 치환 원칙
-프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위타입의 인스턴스로 바꿀수 있어야 한다.
다형성에서 하위클래스는 인터페이스 규약을 다 지켜야 한다는것, 다형성을 지원하기 위한 원칙,인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다.
단순히 컴파일에 성공하는 것을 넘어서는 이야기
\
예)자동차의 라이트를 키면 라이트가 켜져야하는데 엑셀의 기능을 하면 안되니깐 기능이 확실해야한다는 소리


ISP (인터페이스 분리 원칙)
특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다
자동차 인터페이스 -> 운전 인터페이스 , 정비 인터페이스로 분리
사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트 에 영향을 주지 않음
인터페이스가 명확해지고 가능성이 높아진다.


DIP의존 관계 역전 원칙

OCP에서 설명한 MemberService는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존한다

!!! DIP위반 == 인터페이스에 의존하지않고 구현객체에 더 의존 !!!
    ㄴ 프로그램을 빨리 짜려고 할때 가장 많이 위반하는 원칙

정리
-객체 지향의 핵심은 다형성
-다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.
-다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다.
-다형성 만으로는 OCP,DIP를 지킬 수 없다.
-뭔가 더 필요하다. =======>>> 그래서 나온게 스프링!!!
=========================================================================
스프링 이야기에 왜 객체 지향 이야기가 나오는가

-스프링은 다음 기술로 다형성 + OCP,DIP를 가능하게 지원
    -DI(Dependency Injection): 의존관계, 의존성 주입
    -DI컨테이너 제공
-클라이언트 코드의 변경 없이 기능 확장
-쉽게 부품을 교체하듯이 개발



정리(실무 고민)
- 인터페이스를 도입하면 추상화라는 비용이 발생한다.
- 기능을 확장할 가능성이 없다면, 구체 클래스를 직접 사용하고, 
향후 꼭 필요할 때 리팩터링 해서 인터페이스를 도입하는 것도 방법이다.











